hand)
qemu-img create -f raw disk.img 200M \
mkfs.fat -n 'MIKAN OS' -s 2 -f 2 -R 32 -F 32 disk.img \
mkdir -p mnt \
sudo mount -o loop disk.img mnt \
sudo mkdir -p mnt/EFI/BOOT \
sudo cp Loader.efi mnt/EFI/BOOT/BOOTX64.EFI \
sudo umount mnt \
qemu-system-x86_64 \
-drive if=pflash,file=/home/yschoi/osbook/devenv/OVMF_CODE.fd \
-drive if=pflash,file=/home/yschoi/osbook/devenv/OVMF_VARS.fd \
-hda disk.img



main)
$HOME/osbook/devenv/run_qemu.sh /home/yschoi/edk2/Build/MikanLoaderX64/DEBUG_CLANG38/X64/Loader.efi

$HOME/osbook/devenv/run_qemu.sh /home/yschoi/edk2/Build/MikanLoaderX64/DEBUG_CLANG38/X64/Loader.efi $HOME/workspace/mikanos/kernel/kernel.elf

compile)
osbook_day03a

source $HOME/osbook/devenv/buildenv.sh

rm kernel.elf main.o

clang++ $CPPFLAGS -O2 -Wall --target=x86_64-elf -ffreestanding -mno-red-zone \
-fno-exceptions -fno-rtti -std=c++17 -c main.cpp

ld.lld $LDFLAGS --entry KernelMain -z norelro --image-base 0x100000 --static \
-o kernel.elf main.o